@page "/averiaform1"

@using Dispatcher = Fluxor.Dispatcher
@using GEO_DROID.Store
@using GEO_DROID.Store.AveriaEstado
@using GEO_DROID.Store.Concepto
@using GEO_DROID.Store.Maquinas

@inject IDispatcher Dispatcher
@inject IState<AveriaState> AveriaState
@inject IState<EstablecimientoState> EstablecimientoState
@inject IState<MaquinasState> MaquinaState
@inject IState<AveriaEstadoState> AveriaEstadoState

@inject IState<ConceptoAveriaState> ConceptoState
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IStringLocalizer<StringLocalizer> Localizer

@inject IJSRuntime JS

@if (AveriaView)
{
    <form class="w-100 content overflow-auto  w-100 d-flex flex-column align-items-center justify-content-start scrollableForm " needs-validation>
        <div class="row w-100 bg-dark ">
            <div class="col-12 w-100 d-flex flex-column justify-content-center align-items-center">
                <span style="color:white" class="SubTitulo">Detalles</span>
            </div>
        </div>
        <div class="row w-100  ">
            <div class="col-12 w-100 border">
                <div Class=" d-flex flex-column justify-content-start mb-1" @onclick="() => Dispatcher.Dispatch(new ChangeModalMaquinaSelecter(true))">
                    <label class="TextoMedio">
                        Maquina
                    </label>
                    @if (@MaquinaState.Value.MaquinaSelected is not null)
                    {
                        <input class="form-control" Style="height: fit-content; min-height: 1.5em; color: blue" readonly value="@MaquinaState.Value.MaquinaSelected.codigo / @MaquinaState.Value.MaquinaSelected.modeloMaquina" />
                    }
                    else
                    {
                        <input class="form-control" style="height: 1.5em !important ;" readonly />
                    }
                    @if (false)
                    {
                        <div class="invalid-feedback">
                            Please choose a valid Concept.
                        </div>
                    }
                </div>
                <GEO_DROID.Shared.Components.Selecter.MaquinasSelecter />
            </div>
            <div class="col-12 w-100 border">
                <div Class=" d-flex flex-column justify-content-start mb-1" @onclick="() =>Dispatcher.Dispatch(new ChangeModalConceptoSelecter(true))">
                    <label class="TextoMedio">
                        Concepto
                    </label>
                    @if (@ConceptoState.Value.ConceptoAveriaSelected is not null)
                    {
                        <input class="form-control " Style="height: fit-content; min-height: 1.5em; color: blue" @bind="@ConceptoState.Value.ConceptoAveriaSelected.descripcion" readonly ontouchstart="" />
                    }
                    else
                    {
                        <input class="form-control" style="height: 1.5em !important ;" readonly />
                    }
                    @if (true)
                    {
                        <div class="invalid-feedback">
                            Please choose a valid Concept.
                        </div>
                    }
                </div>
                <GEO_DROID.Shared.Components.Selecter.ConceptoSelecter />
            </div>
            <div class="col-12 w-100 border">
                <div Class=" d-flex flex-column justify-content-start mb-1" @onclick="() =>Dispatcher.Dispatch(new ChangeModalAveriaestadoSelecter(true))">
                    <label class="TextoMedio">
                        Estado
                    </label>
                    @if (@AveriaEstadoState.Value.AveriaEstadoSelected is not null)
                    {
                        <input class="form-control " Style="height: fit-content; min-height: 1.5em; color: blue" @bind="@AveriaEstadoState.Value.AveriaEstadoSelected.descripcion" readonly ontouchstart="" />
                    }
                    else
                    {
                        <input class="form-control" style="height: 1.5em !important ;" readonly />
                    }
                    @if (true)
                    {
                        <div class="invalid-feedback">
                            Please choose a valid Concept.
                        </div>
                    }
                </div>
                <GEO_DROID.Shared.Components.Selecter.EstadoSelecter />
            </div>
        </div>
        <div class="row w-100  ">
            <div class="col-12 w-100 border d-flex flex-column justify-content-start pl-3 ">
                <span>Descripción</span>
                <textarea oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"' class="bluetext mb-1 auto-expand" style=" min-height:1.5em ;" @bind="averia.observaciones" placeholder="Comentarios"></textarea>
            </div>
            <div class="col-12 w-100 border d-flex flex-column justify-content-start pl-3 ">
                <span>Detalle</span>
                <textarea oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"' class="bluetext mb-1 auto-expand" style=" min-height:1.5em ;" @bind="averia.detalle" placeholder="Detalle"></textarea>
            </div>
            <div class="col-12 w-100 border d-flex flex-column justify-content-start pl-3">
                <span>Comentarios</span>
                <textarea oninput='this.style.height = "";this.style.height = this.scrollHeight + "px"' class="bluetext mb-1 auto-expand " style=" min-height:1.5em ; " @bind="averia.comentarios" placeholder="Comentarios"></textarea>
            </div>
        </div>

        <div class="row w-100 bg-dark">
            <div class="col-12 w-100 d-flex flex-column justify-content-center align-items-center">
                <span style="color:white" class="subtitle">Acciones</span>
            </div>
        </div>
        <div class="row w-100 border ">
            <div class="col-12 w-100 border d-flex flex-column justify-content-start" @onclick='() => NavigateToCarga()'>
                <span class="fs-6">Realizar carga</span>
                @if (carga != null)
                {
                    <span class="bluetext">Realizada @carga.cargaEmpresa / @carga.recuperacionEmpresa </span>
                }
                else
                {
                    <span class="bluetext">No realizada</span>
                }
            </div>
            <div class="col-12 w-100 border d-flex flex-column justify-content-start" @onclick='() => NavigateToLecturaInicial()'>
                <span class="fs-6">Lectura inicial de contadores</span>
                @if (realizadaIni)
                {
                    <span class="bluetext">Realizada </span>
                    @foreach (LecturaDetalle lec in lecturasdetalle)
                    {
                        <span class="bluetext"> @lec.valorAntes  </span>
                    }
                }
                else
                {
                    <span class="bluetext">No realizada</span>
                }

            </div>
            <div class="col-12 w-100 border d-flex flex-column justify-content-start" @onclick='() => NavigateToLecturaFinal()'>
                <span class="fs-6">Lectura final contadores</span>
                @if (realizadaFin)
                {
                    <span class="bluetext">Realizada </span>
                    @foreach (LecturaDetalle lec in lecturasdetalle)
                    {
                        <span class="bluetext"> @lec.valor  </span>
                    }
                }
                else
                {
                    <span class="bluetext">No realizada</span>
                }
            </div>
        </div>
    </form>

    <div class="row m-1 fixed-bottom ">
        <div class="col-4 p-1">
            <button style="overflow-wrap: break-word; " type="button" class="btn btn-secondary w-100" @onclick="GuardarAveria">Guardar</button>
        </div>
        <div class="col-4 p-1">
            <button style="overflow-wrap: break-word; " type="button" class="btn btn-secondary w-100" disabled="@((AveriaState.Value.AveriaSelected is null ))" @onclick="EliminarAveria">Eliminar</button>
        </div>
        <div class="col-4 p-1">
            <button style="overflow-wrap: break-word; " type="button" class="btn btn-secondary w-100" @onclick='() => GoBack()'>Cancelar</button>
        </div>
    </div>

}
else if (CargaView)
{
    @* <GEO_DROID.Shared.Components.Forms.CargaForm/>  *@
}
else if (LecturaInicialContadores)
{
    @* <GEO_DROID.Shared.Components.Forms.LecturaInicialContadoresForm/>   *@
}
else if (LecturaFinalContadores)
{
    @* <GEO_DROID.Shared.Components.Forms.LecturaFinalContadores/>  *@
}

@code {

    private string title = "";

    private Averia averia = new Averia();
    private Establecimiento establecimiento;
    private Carga carga;

    private LecturaContador lecturaContador;
    private List<LecturaDetalle> lecturasdetalle;
    private bool ActiveTeclado = false;

    private bool IsIdMaquinaValid = true;
    private bool IsIdConceptoValid = true;
    private bool IsIdEstadoValid = true;

    private bool realizadaIni = false;
    private bool realizadaFin = false;

    private bool modalDescripción = false;
    private bool modalDetalle = false;
    private bool modalComentario = false;

    private bool AveriaView = true;
    private bool CargaView = false;
    private bool LecturaInicialContadores = false;
    private bool LecturaFinalContadores = false;

    private bool margin = false;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (AveriaState?.Value is not null)
        {
            averia = AveriaState.Value.AveriaSelected;
        }


    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (averia is null || averia.id == -1)
        {
            title = "Añadir Averia";
            averia = new Averia();
            averia.Incidencia = new Incidencia();
        }
        else
        {
            title = "Editando Averia";
            // averia = await _AveriasService.GetAveriaById(averia.id);
            // carga = await _CargaService.GetCargaByAveriaId(averia.id);
            // lecturaContador = await _LecturaContadorService.GetLecturaContadorByIncidenciaId(averia.idIncidencias);
            if (lecturaContador != null)
            {
                // lecturasdetalle = await _LecturaContadorDetalleService.GetLecturaDetalleByLecturaContadorAsync(lecturaContador.id);
            }
            if (lecturasdetalle != null)
            {
                foreach (LecturaDetalle item in lecturasdetalle)
                {
                    if (item.valor != 0)
                    {
                        realizadaFin = true;
                    }
                    if (item.valorAntes != 0)
                    {
                        realizadaIni
                         = true;
                    }
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JS.InvokeVoidAsync("initializeAutoExpandTextAreas");

    }

    private async Task HandleMaquinaAveriaChanged(int idmaquina)
    {
        IsIdMaquinaValid = idmaquina > 0;
        await JS.InvokeVoidAsync("initializeAutoExpandTextAreas");
    }

    private async Task HandleConceptoAveriaChanged(int? idconcepto)
    {
        IsIdConceptoValid = idconcepto > 0;
    }

    private async Task HandleEstadoAveriaChanged(int? idestado)
    {
        IsIdEstadoValid = idestado > 0;
    }

    private async Task HandleCargaChanged(Carga carga)
    {
        this.carga = carga;
        AveriaView = true;
        CargaView = false;
    }

    private async Task HandleLecturaInicialChanged(List<LecturaDetalle> lecturasDetalle)
    {
        this.lecturasdetalle = lecturasDetalle;
        AveriaView = true;
        LecturaInicialContadores = false;
        LecturaFinalContadores = false;

    }

    private async Task HandleLecturaFinalChanged(List<LecturaDetalle> lecturasDetalle)
    {
        this.lecturasdetalle = lecturasDetalle;
        AveriaView = true;
        LecturaFinalContadores = false;
        LecturaInicialContadores = false;

    }

    private void NavigateTo(string pageTitle)
    {
        Dispatcher.Dispatch(new NavigationToAction($"/{pageTitle.ToLower()}"));
    }

    private void NavigateToCarga()
    {
        if (averia.Incidencia.idMaquinas > 0)
        {
            AveriaView = false;
            LecturaFinalContadores = false;
            LecturaInicialContadores = false;

            CargaView = true;
        }
    }

    private void NavigateToLecturaInicial()
    {
        if (averia.Incidencia.idMaquinas > 0)
        {
            AveriaView = false;
            LecturaFinalContadores = false;
            LecturaInicialContadores = true;

            CargaView = false;
        }
    }

    private void NavigateToLecturaFinal()
    {
        if (averia.Incidencia.idMaquinas > 0)
        {
            AveriaView = false;
            LecturaFinalContadores = true;
            LecturaInicialContadores = false;

            CargaView = false;
        }
    }

    public async void EliminarAveria()
    {
        // int resp = await _AveriasService.DeleteAveriaAsync(averia);

        Dispatcher.Dispatch(new NavigationToAction($"averias"));
    }

    public async void GuardarAveria()
    {

        Dispatcher.Dispatch(new AddAveria(averia));

    }



    public async void GuardarCarga()
    {
        AveriaView = true;
        CargaView = false;
        LecturaInicialContadores = false;
        LecturaFinalContadores = false;
    }

    private void ShowModalDescripción()
    {
        modalDescripción = true;
    }

    private void HideModalDescripción()
    {
        modalDescripción = false;
    }

    private void HideModalDetalle()
    {
        modalDetalle = false;
    }

    private void ShowModalDetalle()
    {
        modalDetalle = true;
    }

    private void HideModalComentario()
    {
        modalComentario = false;
    }

    private void ShowModaComentario()
    {
        modalComentario = true;


    }

    private async void GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

}
