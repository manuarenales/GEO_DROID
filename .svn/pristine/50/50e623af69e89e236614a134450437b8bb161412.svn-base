@page "/utilities"
@using GEO_DROID.Models
@using GEO_DROID.Resources
@using InTheHand.Net.Bluetooth
@using InTheHand.Net.Sockets
@using Microsoft.Maui.Controls.PlatformConfiguration
@using System.Collections.ObjectModel
@using System.Net.Sockets
@using System.Text
@using BlazorBarcodeScanner.ZXing.JS
@inject TodoItemDatabase todoItemDatabase

<h1>INDEX </h1>
@if (devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Id</td>
                    <td>@device.Name </td>
                    <button @onclick="() => Delete(device)">Delete</button>
                </tr>
            }
        </tbody>
    </table>

    @if (devicesBL.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>conected</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var devicebl in devicesBL)
                {
                    <tr>
                        <td>@devicebl.DeviceAddress </td>
                        <td>@devicebl.DeviceName</td>
                        <td class="@((devicebl.Connected) ? "connected" : "disconnected")">@devicebl.Connected</td>
                        <button @onclick="() => ConectBl(devicebl)">Conect</button>
                    </tr>
                }
            </tbody>
        </table> 
    }
}
<h2>Agregar nuevo dispositivo</h2>
<form @onsubmit="createDevice">
    <label for="name">Nombre:</label>
    <input required @bind="newDevice.Name" id="name" />
    <input type="date" @bind="_endDate" format-value="yyyy-MM-dd" />
    <input type="checkbox" value="@enabled" checked="true" />
    <button type="submit">Agregar</button>
</form>


<button @onclick="ONOFFBlue">Agregar por Bluetooth</button>
@if (Connected)
{
    <button @onclick="SendData">Mandar Por Bluetooth</button>

}

<BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title="Scan Barcode from Camera"
                                             StartCameraAutomatically="false"
                                             ShowStart="true"
                                             ShowReset="true"
                                             ShowVideoDeviceList="true"
                                             VideoWidth="300"
                                             VideoHeight="200"
                                             OnBarcodeReceived="LocalReceivedBarcodeText"
                                             OnErrorReceived="Wat" />


@code {
    ObservableCollection<DeviceCandidate> devices;
    IReadOnlyCollection<BluetoothDeviceInfo> devicesBL;
    private DeviceCandidate newDevice = new DeviceCandidate();
    private BluetoothClient client;
    private bool Connected = false;
    private BluetoothDeviceInfo deviceConected;
    private string LocalBarcodeText;
    DateTime SelectedDate { get; set; } = DateTime.Now;
    DateTime Time { get; set; } = DateTime.Now;
    DateTime _endDate;
    bool enabled;

    protected override async Task OnInitializedAsync()
    {
        devices = new ObservableCollection<DeviceCandidate>(await LoadDevices());
        devicesBL = new List<BluetoothDeviceInfo>();
        await Permissions.RequestAsync<BluetoothPermissions>();
        await Permissions.RequestAsync<Permissions.Camera>();
        client = new BluetoothClient();
        _endDate = new DateTime();
    }

    public async Task<List<DeviceCandidate>> LoadDevices()
    {
        return await todoItemDatabase.GetItemsAsync();
    }

    public async void createDevice()
    {
        newDevice.Id = 0;
        await todoItemDatabase.SaveItemAsync(newDevice);
        devices = new ObservableCollection<DeviceCandidate>(await LoadDevices());
        StateHasChanged();
    }

    public async void Delete(DeviceCandidate device)
    {
        await todoItemDatabase.DeleteItemAsync(device);
        devices = new ObservableCollection<DeviceCandidate>(await LoadDevices());
        StateHasChanged();
    }

    public void ONOFFBlue()
    {
        try
        {
            devicesBL = client.DiscoverDevices();
            StateHasChanged();
        }
        catch (Exception e)
        {
            throw;
        }
    }

    public void ConectBl(BluetoothDeviceInfo device)
    {
        try
        {
            if (device != null && device.DeviceAddress != null)
            {
                client.Connect(device.DeviceAddress, BluetoothService.SerialPort);
                if (client.Connected)
                {
                    Connected = true;
                    deviceConected = device;
                    Console.WriteLine("Conectado con éxito al dispositivo Bluetooth.");
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("No se pudo conectar al dispositivo Bluetooth.");
                }
            }
            else
            {
                Console.WriteLine("El dispositivo o la dirección del dispositivo no pueden ser nulos.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar el dispositivo Bluetooth: {ex.Message}");
        }
    }

    public async void SendData()
    {
        try
        {
            if (client.Connected)
            {
                NetworkStream stream = client.GetStream();
                if (stream.CanWrite)
                {
                    byte[] byteArray = Encoding.UTF8.GetBytes("lest go , Im alive !!");
                    await stream.WriteAsync(byteArray, 0, byteArray.Length);
                    Console.WriteLine("Datos enviados al dispositivo Bluetooth.");
                }
                else
                {
                    Console.WriteLine("No se puede escribir en el stream del dispositivo Bluetooth.");
                }
            }
            else
            {
                Console.WriteLine("El cliente Bluetooth no está conectado.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al enviar datos al dispositivo Bluetooth: {ex.Message}");
        }
    }

    private void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {

        this.LocalBarcodeText = args.BarcodeText;
        StateHasChanged();
    }

    public void Wat(object error)
    {
        var sis = error;
    }


}
