using Fluxor;
using GEO_DROID.Shared.Components.Dialogs;
using GeoDroid.Data.SQL;
using Microsoft.FluentUI.AspNetCore.Components;
using Microsoft.JSInterop;

namespace GEO_DROID.Store.AveriaEstado
{

    public class AveriaEstadoEffects
    {
        private readonly GeoDroidDatabase _database;
        private readonly IDialogService _dialogService;
        private readonly IJSRuntime _JS;

        public AveriaEstadoEffects(GeoDroidDatabase database, IDialogService DialogService, IJSRuntime JS)
        {
            _database = database;
            _dialogService = DialogService;
            _JS = JS;
        }

        [EffectMethod]
        public async Task GetAveriaEstadosList(GetAveriaEstadoList action, Fluxor.IDispatcher dispatcher)
        {

            try
            {
                List<GeoDroid.Data.AveriaEstado> AveriaEstado = await _database._database.Table<GeoDroid.Data.AveriaEstado>().ToListAsync();
                if (AveriaEstado.Count == 0)
                {
                    await _database._database.InsertAsync(new GeoDroid.Data.AveriaEstado { descripcion = "Cerrada" });
                }
                AveriaEstado = await _database._database.Table<GeoDroid.Data.AveriaEstado>().ToListAsync();
                dispatcher.Dispatch(new ChangeAveriaEstadoListForSelecter(AveriaEstado));
            }
            catch (Exception ex)
            {

                throw;
            }

        }


        [EffectMethod]
        public async Task DeleteAveria(DeleteAveria action, Fluxor.IDispatcher dispatcher)
        {
            GenericConfirmationDialog content = new()
            {
                Title = "Seguro que desea Eliminar ?",
                PrimaryAction = "Aceptar",
                DismissTitle = "Cancelar",
            };

            DialogParameters parameters = new()
            {
                Title = content.Title,
                PrimaryActionEnabled = true,
                PrimaryAction = content.PrimaryAction,
                DismissTitle = content.PrimaryAction,
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

            IDialogReference dialog = await _dialogService.ShowDialogAsync<GenericConformationDialog>(content, parameters);
            DialogResult? result = await dialog.Result;

            if (result.Data is not null)
            {
                if (result.Cancelled)
                {
                    // Cancelar 
                }
                else
                {
                    //Aceptar
                    try
                    {
                        await _database._database.DeleteAsync(action.averia);
                        await _JS.InvokeVoidAsync("history.back");
                    }
                    catch (Exception ex)
                    {

                        throw;
                    }
                }
            }
            else
            {

            }

        }


    }
}
