// <auto-generated />
using System;
using GeoDroid.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoDroid.Data.Migrations
{
    [DbContext(typeof(GeoDroidDbContext))]
    [Migration("20240607121517_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("GeoDroid.Data.Averia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("foto")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("idAveriaEstados")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idCargas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idConceptos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idEstablecimientos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idIncidencias")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idMaquinas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idAveriaEstados");

                    b.HasIndex("idCargas");

                    b.HasIndex("idConceptos");

                    b.HasIndex("idEstablecimientos");

                    b.HasIndex("idIncidencias");

                    b.HasIndex("idMaquinas");

                    b.ToTable("Averias");
                });

            modelBuilder.Entity("GeoDroid.Data.AveriaEstado", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("color")
                        .HasColumnType("INTEGER");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("fin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("AveriasEstados");
                });

            modelBuilder.Entity("GeoDroid.Data.Carga", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ajusteEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ajusteEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("cargaEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("cargaEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("idAverias")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idIncidencia")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("recuperacionEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("recuperacionEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("saldoEmpresaChanged")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("saldoEstablecimientoChanged")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idIncidencia");

                    b.ToTable("Cargas");
                });

            modelBuilder.Entity("GeoDroid.Data.ConceptoAveria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("ConceptoAverias");
                });

            modelBuilder.Entity("GeoDroid.Data.Establecimiento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("avisoRecaudacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("codigoPostal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("comentariosContrato")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("comentariosHorario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("comercial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contacto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("diasDescanso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("envioFacturasEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("esAlmacen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("estadoPermiso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fax")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaCaducidadPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaContrato")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaDesdeTitular")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaFinContrato")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaPresentacionPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaProximaRecaudacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("horaApertura")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("horaCierre")
                        .HasColumnType("TEXT");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("maxDiasSinArquear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("mecanico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nifTitular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nombreTitular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("permiso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("poblacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("recaudacion")
                        .HasColumnType("REAL");

                    b.Property<string>("recaudador")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tecnausaCountersPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tecnausaCountersServidor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("tecnausaCountersUsuario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("tieneLlave")
                        .HasColumnType("INTEGER");

                    b.Property<string>("web")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Establecimientos");
                });

            modelBuilder.Entity("GeoDroid.Data.Incidencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaAlta")
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idMaquinas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idRutaRecaudaciones")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idMaquinas");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("GeoDroid.Data.Maquina", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("arqueoEstablecido")
                        .HasColumnType("TEXT");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcionDistribucion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("diferenciaArqueo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("empresaSaldo")
                        .HasColumnType("TEXT");

                    b.Property<int>("establecimientoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("establecimientoSaldo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaInstalacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaUltimaRecaudacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaUltimoArqueo")
                        .HasColumnType("TEXT");

                    b.Property<int>("idEmpresas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idInstalaciones")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPatronContadores")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idTipoDistribucion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("modeloMaquina")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("pctEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("permiso")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("protocolosMaquinas")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("redondeoParaEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("redondeoValor")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ultimoArqueo")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("establecimientoId");

                    b.ToTable("Maquinas");
                });

            modelBuilder.Entity("GeoDroid.Data.Ruta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Establecimientoid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("bloqueada")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Establecimientoid");

                    b.ToTable("Rutas");
                });

            modelBuilder.Entity("GeoDroid.Data.Averia", b =>
                {
                    b.HasOne("GeoDroid.Data.AveriaEstado", "averiaEstado")
                        .WithMany()
                        .HasForeignKey("idAveriaEstados")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoDroid.Data.Carga", "carga")
                        .WithMany()
                        .HasForeignKey("idCargas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoDroid.Data.ConceptoAveria", "concepto")
                        .WithMany()
                        .HasForeignKey("idConceptos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoDroid.Data.Establecimiento", "establecimiento")
                        .WithMany()
                        .HasForeignKey("idEstablecimientos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoDroid.Data.Incidencia", "incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoDroid.Data.Maquina", "maquina")
                        .WithMany("Averias")
                        .HasForeignKey("idMaquinas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("averiaEstado");

                    b.Navigation("carga");

                    b.Navigation("concepto");

                    b.Navigation("establecimiento");

                    b.Navigation("incidencia");

                    b.Navigation("maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.Carga", b =>
                {
                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.Incidencia", b =>
                {
                    b.HasOne("GeoDroid.Data.Maquina", "maquina")
                        .WithMany()
                        .HasForeignKey("idMaquinas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.Maquina", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "establecimiento")
                        .WithMany("Maquinas")
                        .HasForeignKey("establecimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("establecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.Ruta", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "Establecimiento")
                        .WithMany()
                        .HasForeignKey("Establecimientoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.Establecimiento", b =>
                {
                    b.Navigation("Maquinas");
                });

            modelBuilder.Entity("GeoDroid.Data.Maquina", b =>
                {
                    b.Navigation("Averias");
                });
#pragma warning restore 612, 618
        }
    }
}
