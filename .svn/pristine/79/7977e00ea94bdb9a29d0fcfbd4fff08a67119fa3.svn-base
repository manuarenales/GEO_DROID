// <auto-generated />
using System;
using GeoDroid.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoDroid.Data.Migrations
{
    [DbContext(typeof(GeoDroidDbContext))]
    partial class GeoDroidDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("GeoDroid.Data.AccionComercial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idMotivoAccionComercial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idTipoAccionComercial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("personaContacto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("valoracion")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idEstablecimiento");

                    b.HasIndex("idMotivoAccionComercial");

                    b.HasIndex("idTipoAccionComercial");

                    b.ToTable("AccionComercial");
                });

            modelBuilder.Entity("GeoDroid.Data.Averia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .HasColumnType("TEXT");

                    b.Property<string>("detalle")
                        .HasColumnType("TEXT");

                    b.Property<string>("estado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("foto")
                        .HasColumnType("BLOB");

                    b.Property<int?>("idAveriaEstados")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idConceptos")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idIncidencias")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("observaciones")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idAveriaEstados");

                    b.HasIndex("idConceptos");

                    b.HasIndex("idIncidencias");

                    b.ToTable("Averia");
                });

            modelBuilder.Entity("GeoDroid.Data.AveriaEstado", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("color")
                        .HasColumnType("INTEGER");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("fin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("AveriaEstado");
                });

            modelBuilder.Entity("GeoDroid.Data.Carga", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ajusteEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ajusteEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("cargaEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("cargaEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idAverias")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idIncidencia")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("recuperacionEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("recuperacionEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("saldoEmpresaChanged")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("saldoEstablecimientoChanged")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idAverias");

                    b.HasIndex("idIncidencia");

                    b.ToTable("Carga");
                });

            modelBuilder.Entity("GeoDroid.Data.ConceptoAveria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("ConceptoAveria");
                });

            modelBuilder.Entity("GeoDroid.Data.ConceptoGastoEstablecimiento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("activoEnTerminales")
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("ConceptoGastoEstablecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.ConceptoMotivoMaquinaNoRecaudada", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("ConceptoMotivoMaquinaNoRecaudada");
                });

            modelBuilder.Entity("GeoDroid.Data.ConceptoPrestamo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("activoEnTerminales")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("cargasHopper")
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("fondoPerdido")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("ConceptoPrestamo");
                });

            modelBuilder.Entity("GeoDroid.Data.Configuration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("port")
                        .HasMaxLength(5)
                        .HasColumnType("INTEGER");

                    b.Property<bool>("printSignature")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("printTwoCopies")
                        .HasColumnType("INTEGER");

                    b.Property<string>("printerMAC")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("serverDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("syncCompressionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("syncToken")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("tempSyncToken")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("unitNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("GeoDroid.Data.ConfigurationGEO", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("valor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("ConfigurationGEO");
                });

            modelBuilder.Entity("GeoDroid.Data.DTO.CacheImportes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("cargas")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("gastos")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("neto")
                        .HasColumnType("TEXT");

                    b.Property<int>("numeroRecaudaciones")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("prestamos")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("recuperacionesCargas")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("recuperacionesPrestamos")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("tasas")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("CacheImportes");
                });

            modelBuilder.Entity("GeoDroid.Data.DTO.CacheImportesConceptosRecaudacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CacheImportesid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idCacheImportes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idConceptoRecaudacionGeo")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("importe")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("CacheImportesid");

                    b.ToTable("CacheImportesConceptosRecaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.DTO.Cambio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("bloqueado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("establecimientoid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fechaEntrega")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaRecuperacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEstablecimientos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonalEntrega")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonalRecuperacion")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("importe")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("establecimientoid");

                    b.ToTable("Cambio");
                });

            modelBuilder.Entity("GeoDroid.Data.DesgloseBruto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("cent_1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cent_10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cent_2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cent_20")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cent_5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("cent_50")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eur_1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eur_10")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eur_2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eur_20")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eur_5")
                        .HasColumnType("INTEGER");

                    b.Property<int>("eur_50")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idRecaudacion")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("DesgloseBruto");
                });

            modelBuilder.Entity("GeoDroid.Data.Empresa", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("cif")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("poblacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("GeoDroid.Data.EmpresaCompetidora", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("EmpresaCompetidora");
                });

            modelBuilder.Entity("GeoDroid.Data.Establecimiento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("avisoRecaudacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("codigo")
                        .HasColumnType("TEXT");

                    b.Property<string>("codigoPostal")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentarios")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentariosContrato")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentariosHorario")
                        .HasColumnType("TEXT");

                    b.Property<string>("comercial")
                        .HasColumnType("TEXT");

                    b.Property<string>("contacto")
                        .HasColumnType("TEXT");

                    b.Property<string>("diasDescanso")
                        .HasColumnType("TEXT");

                    b.Property<string>("direccion")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("envioFacturasEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("esAlmacen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("estadoPermiso")
                        .HasColumnType("TEXT");

                    b.Property<string>("fax")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaCaducidadPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaContrato")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaDesdeTitular")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaFinContrato")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaPresentacionPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaProximaRecaudacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("horaApertura")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("horaCierre")
                        .HasColumnType("TEXT");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("maxDiasSinArquear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("mecanico")
                        .HasColumnType("TEXT");

                    b.Property<string>("nifTitular")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombreTitular")
                        .HasColumnType("TEXT");

                    b.Property<string>("permiso")
                        .HasColumnType("TEXT");

                    b.Property<string>("poblacion")
                        .HasColumnType("TEXT");

                    b.Property<double>("recaudacion")
                        .HasColumnType("REAL");

                    b.Property<string>("recaudador")
                        .HasColumnType("TEXT");

                    b.Property<string>("tecnausaCountersPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("tecnausaCountersServidor")
                        .HasColumnType("TEXT");

                    b.Property<string>("tecnausaCountersUsuario")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono1")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono2")
                        .HasColumnType("TEXT");

                    b.Property<bool>("tieneLlave")
                        .HasColumnType("INTEGER");

                    b.Property<string>("web")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Establecimientos");
                });

            modelBuilder.Entity("GeoDroid.Data.EstablecimientoPotencial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigoPostal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("idComercial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPoblacion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono2")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idPoblacion");

                    b.ToTable("EstablecimientoPotencial");
                });

            modelBuilder.Entity("GeoDroid.Data.EstablecimientoPotencialMaquina", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaPermiso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaRenovacion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idEmpresaCompetidora")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEstablecimientoPotencial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idModelo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idEmpresaCompetidora");

                    b.HasIndex("idEstablecimientoPotencial");

                    b.HasIndex("idModelo");

                    b.ToTable("EstablecimientoPotencialMaquina");
                });

            modelBuilder.Entity("GeoDroid.Data.GastoEstablecimiento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("baseImponible")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idConceptoGastoEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEmpresas")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("iva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("pctIva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("total")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idConceptoGastoEstablecimiento");

                    b.HasIndex("idEmpresas");

                    b.HasIndex("idEstablecimiento");

                    b.ToTable("GastoEstablecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.Incidencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaAlta")
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idMaquinas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idRutaRecaudaciones")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idMaquinas");

                    b.ToTable("Incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.Instalacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("arqueo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("arqueoEstablecido")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaInstalacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaInstalacionPrevista")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaModificacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaTransporteGet")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaTransportePut")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idEstablecimientoDestino")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEstablecimientoOrigen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idIncidencia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idMaquinas")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idEstablecimientoDestino");

                    b.HasIndex("idEstablecimientoOrigen");

                    b.HasIndex("idIncidencia");

                    b.HasIndex("idMaquinas");

                    b.ToTable("Instalacion");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaContador", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idIncidencias")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idIncidencias");

                    b.ToTable("LecturaContador");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaContadorAuto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idIncidencias")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipoLecturaContadores")
                        .HasColumnType("INTEGER");

                    b.Property<int>("valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idIncidencias");

                    b.ToTable("LecturaContadorAuto");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaDetalle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idLecturaContadores")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPatContDetalles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("tieneAjuste")
                        .HasColumnType("INTEGER");

                    b.Property<long>("valor")
                        .HasColumnType("INTEGER");

                    b.Property<long>("valorAntes")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idLecturaContadores");

                    b.HasIndex("idPatContDetalles");

                    b.ToTable("LecturaDetalle");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaDetalleAuto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idLecturaContadoresAuto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipoContadoresProtocolos")
                        .HasColumnType("INTEGER");

                    b.Property<long>("valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("LecturaDetalleAuto");
                });

            modelBuilder.Entity("GeoDroid.Data.Localizacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fechaHora")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idTerminal")
                        .HasColumnType("INTEGER");

                    b.Property<double>("latitud")
                        .HasColumnType("REAL");

                    b.Property<double>("longitud")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.ToTable("Localizacion");
                });

            modelBuilder.Entity("GeoDroid.Data.Maquina", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Empresaid")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("arqueoEstablecido")
                        .HasColumnType("TEXT");

                    b.Property<string>("codigo")
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcionDistribucion")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("diferenciaArqueo")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("empresaSaldo")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("establecimientoSaldo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaInstalacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaUltimaRecaudacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaUltimoArqueo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idInstalaciones")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPatronContadores")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idTipoDistribucion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("modeloMaquina")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("patronContadorid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("pctEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("permiso")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("protocolosMaquinas")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("redondeoParaEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("redondeoValor")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ultimoArqueo")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Empresaid");

                    b.HasIndex("idEstablecimiento");

                    b.HasIndex("patronContadorid");

                    b.ToTable("Maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.MaquinaConceptoRecaudacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("acumular")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("diario")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("fijo")
                        .HasColumnType("TEXT");

                    b.Property<int>("idConceptoRecaudacionGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idMaquina")
                        .HasColumnType("INTEGER");

                    b.Property<int>("pct")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("pendiente")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("semanal")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idMaquina");

                    b.ToTable("MaquinaConceptoRecaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.ModeloMaquina", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("ModeloMaquina");
                });

            modelBuilder.Entity("GeoDroid.Data.ModuloCaptura", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idMaquinas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("imei")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("mac")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idMaquinas");

                    b.ToTable("ModuloCaptura");
                });

            modelBuilder.Entity("GeoDroid.Data.MotivoAccionComercial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("MotivoAccionComercial");
                });

            modelBuilder.Entity("GeoDroid.Data.MotivoMaquinaNoRecaudada", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("idConceptoMotivoMaquinaNoRecaudada")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idIncidencia")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idConceptoMotivoMaquinaNoRecaudada");

                    b.HasIndex("idIncidencia");

                    b.ToTable("MotivoMaquinaNoRecaudada");
                });

            modelBuilder.Entity("GeoDroid.Data.MotivoVisitaComercial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("MotivoVisitaComercial");
                });

            modelBuilder.Entity("GeoDroid.Data.PatContDetalle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPatronContadores")
                        .HasColumnType("INTEGER");

                    b.Property<int>("orden")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipoBasico")
                        .HasColumnType("INTEGER");

                    b.Property<string>("tipoContadores")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("tipoProtocolos")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("valorPaso")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("PatContDetalle");
                });

            modelBuilder.Entity("GeoDroid.Data.PatronContador", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("PatronesContador");
                });

            modelBuilder.Entity("GeoDroid.Data.PatronContadorDetalle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPatronContador")
                        .HasColumnType("INTEGER");

                    b.Property<int>("orden")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipoBasico")
                        .HasColumnType("INTEGER");

                    b.Property<string>("tipoContadores")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("tipoProtocolos")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("valorPaso")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idPatronContador");

                    b.ToTable("PatronesContadoresDetalle");
                });

            modelBuilder.Entity("GeoDroid.Data.Poblacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Poblacion");
                });

            modelBuilder.Entity("GeoDroid.Data.Prestamo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaUltimaRecuperacion")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idConceptoPrestamo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idMaquina")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonalEntrega")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("importe")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("importePorRecuperacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("pctPorRecuperacion")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("saldo")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idConceptoPrestamo");

                    b.HasIndex("idEmpresa");

                    b.HasIndex("idEstablecimiento");

                    b.HasIndex("idMaquina");

                    b.ToTable("Prestamo");
                });

            modelBuilder.Entity("GeoDroid.Data.PrestamoRecuperacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("idCarga")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonalRecuperacion")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPrestamos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idRuta")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("importe")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idPrestamos");

                    b.ToTable("PrestamoRecuperacion");
                });

            modelBuilder.Entity("GeoDroid.Data.Recaudacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("arqueoRealizado")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("bruto")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("idIncidencia")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idRuta")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("netoEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("netoEstablecimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("observaciones")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("recaudacion")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("valorArqueo")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idIncidencia");

                    b.HasIndex("idRuta");

                    b.ToTable("Recaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.Ruta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("bloqueada")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idEstablecimiento");

                    b.ToTable("Ruta");
                });

            modelBuilder.Entity("GeoDroid.Data.TipoAccionComercial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("TipoAccionComercial");
                });

            modelBuilder.Entity("GeoDroid.Data.TipoCombustible", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("TipoCombustible");
                });

            modelBuilder.Entity("GeoDroid.Data.TipoDistribucionConceptoRecaudacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("concepto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("esIngreso")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("establecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("facturable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idConceptoRecaudacionGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idTipoDistribucion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("orden")
                        .HasColumnType("INTEGER");

                    b.Property<int>("pctBruto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("pctEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("pctEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("TipoDistribucionConceptoRecaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.UltimaLecturaRecaudacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ajustePostLectura")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idMaquina")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idPatContDetalles")
                        .HasColumnType("INTEGER");

                    b.Property<long>("valor")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idMaquina");

                    b.HasIndex("idPatContDetalles");

                    b.ToTable("UltimaLecturaRecaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.Vehiculo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("idEmpresa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("matricula")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("maxKm")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("GeoDroid.Data.VehiculoCombustible", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idTipoCombustible")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idVehiculos")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idTipoCombustible");

                    b.HasIndex("idVehiculos");

                    b.ToTable("VehiculoCombustible");
                });

            modelBuilder.Entity("GeoDroid.Data.VehiculoKm", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idVehiculos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("km")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idVehiculos");

                    b.ToTable("VehiculoKm");
                });

            modelBuilder.Entity("GeoDroid.Data.VehiculoRepostaje", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("baseImponible")
                        .HasColumnType("TEXT");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("foto")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int?>("idEmpresas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idTipoCombustible")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idVehiculos")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("iva")
                        .HasColumnType("TEXT");

                    b.Property<int>("km")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("pctIva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("precioUnidadCombustible")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("total")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idEmpresas");

                    b.HasIndex("idTipoCombustible");

                    b.HasIndex("idVehiculos");

                    b.ToTable("VehiculoRepostaje");
                });

            modelBuilder.Entity("GeoDroid.Data.VisitaComercial", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentarios")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int?>("idEstablecimiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idGeo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idMotivoVisitaComercial")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("personaContacto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("valoracion")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("idEstablecimiento");

                    b.HasIndex("idMotivoVisitaComercial");

                    b.ToTable("VisitaComercial");
                });

            modelBuilder.Entity("Geodroid.Data.RecaudacionDetalles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("idConceptoRecaudacion")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("idRecaudacion")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("importe")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("importeDefecto")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("idRecaudacion");

                    b.ToTable("RecaudacionDetalles");
                });

            modelBuilder.Entity("GeoDroid.Data.AccionComercial", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "Establecimiento")
                        .WithMany("AccionesComerciales")
                        .HasForeignKey("idEstablecimiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoDroid.Data.MotivoAccionComercial", "MotivoAccionComercial")
                        .WithMany("AccionesComerciales")
                        .HasForeignKey("idMotivoAccionComercial")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoDroid.Data.TipoAccionComercial", "TipoAccionComercial")
                        .WithMany("AccionesComerciales")
                        .HasForeignKey("idTipoAccionComercial")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Establecimiento");

                    b.Navigation("MotivoAccionComercial");

                    b.Navigation("TipoAccionComercial");
                });

            modelBuilder.Entity("GeoDroid.Data.Averia", b =>
                {
                    b.HasOne("GeoDroid.Data.AveriaEstado", "AveriaEstado")
                        .WithMany()
                        .HasForeignKey("idAveriaEstados");

                    b.HasOne("GeoDroid.Data.ConceptoAveria", "ConceptoAveria")
                        .WithMany()
                        .HasForeignKey("idConceptos");

                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AveriaEstado");

                    b.Navigation("ConceptoAveria");

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.Carga", b =>
                {
                    b.HasOne("GeoDroid.Data.Averia", "Averia")
                        .WithMany()
                        .HasForeignKey("idAverias");

                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia");

                    b.Navigation("Averia");

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.DTO.CacheImportesConceptosRecaudacion", b =>
                {
                    b.HasOne("GeoDroid.Data.DTO.CacheImportes", null)
                        .WithMany("cacheImportesConceptosRecaudacion")
                        .HasForeignKey("CacheImportesid");
                });

            modelBuilder.Entity("GeoDroid.Data.DTO.Cambio", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "establecimiento")
                        .WithMany()
                        .HasForeignKey("establecimientoid");

                    b.Navigation("establecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.EstablecimientoPotencial", b =>
                {
                    b.HasOne("GeoDroid.Data.Poblacion", "Poblacion")
                        .WithMany()
                        .HasForeignKey("idPoblacion");

                    b.Navigation("Poblacion");
                });

            modelBuilder.Entity("GeoDroid.Data.EstablecimientoPotencialMaquina", b =>
                {
                    b.HasOne("GeoDroid.Data.EmpresaCompetidora", "EmpresaCompetidora")
                        .WithMany()
                        .HasForeignKey("idEmpresaCompetidora");

                    b.HasOne("GeoDroid.Data.EstablecimientoPotencial", "EstablecimientoPotencial")
                        .WithMany()
                        .HasForeignKey("idEstablecimientoPotencial");

                    b.HasOne("GeoDroid.Data.ModeloMaquina", "Modelo")
                        .WithMany()
                        .HasForeignKey("idModelo");

                    b.Navigation("EmpresaCompetidora");

                    b.Navigation("EstablecimientoPotencial");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("GeoDroid.Data.GastoEstablecimiento", b =>
                {
                    b.HasOne("GeoDroid.Data.ConceptoGastoEstablecimiento", "ConceptoGastoEstablecimiento")
                        .WithMany()
                        .HasForeignKey("idConceptoGastoEstablecimiento");

                    b.HasOne("GeoDroid.Data.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresas");

                    b.HasOne("GeoDroid.Data.Establecimiento", "Establecimiento")
                        .WithMany()
                        .HasForeignKey("idEstablecimiento");

                    b.Navigation("ConceptoGastoEstablecimiento");

                    b.Navigation("Empresa");

                    b.Navigation("Establecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.Incidencia", b =>
                {
                    b.HasOne("GeoDroid.Data.Maquina", "maquina")
                        .WithMany()
                        .HasForeignKey("idMaquinas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.Instalacion", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "EstablecimientoDestino")
                        .WithMany()
                        .HasForeignKey("idEstablecimientoDestino");

                    b.HasOne("GeoDroid.Data.Establecimiento", "EstablecimientoOrigen")
                        .WithMany()
                        .HasForeignKey("idEstablecimientoOrigen");

                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoDroid.Data.Maquina", "Maquina")
                        .WithMany()
                        .HasForeignKey("idMaquinas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstablecimientoDestino");

                    b.Navigation("EstablecimientoOrigen");

                    b.Navigation("Incidencia");

                    b.Navigation("Maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaContador", b =>
                {
                    b.HasOne("GeoDroid.Data.Incidencia", "incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencias");

                    b.Navigation("incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaContadorAuto", b =>
                {
                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencias");

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.LecturaDetalle", b =>
                {
                    b.HasOne("GeoDroid.Data.LecturaContador", "LecturaContador")
                        .WithMany()
                        .HasForeignKey("idLecturaContadores")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoDroid.Data.PatronContadorDetalle", "PatronContadorDetalle")
                        .WithMany()
                        .HasForeignKey("idPatContDetalles")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LecturaContador");

                    b.Navigation("PatronContadorDetalle");
                });

            modelBuilder.Entity("GeoDroid.Data.Maquina", b =>
                {
                    b.HasOne("GeoDroid.Data.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("Empresaid");

                    b.HasOne("GeoDroid.Data.Establecimiento", "establecimiento")
                        .WithMany("Maquinas")
                        .HasForeignKey("idEstablecimiento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeoDroid.Data.PatronContador", "patronContador")
                        .WithMany()
                        .HasForeignKey("patronContadorid");

                    b.Navigation("Empresa");

                    b.Navigation("establecimiento");

                    b.Navigation("patronContador");
                });

            modelBuilder.Entity("GeoDroid.Data.MaquinaConceptoRecaudacion", b =>
                {
                    b.HasOne("GeoDroid.Data.Maquina", "Maquina")
                        .WithMany()
                        .HasForeignKey("idMaquina");

                    b.Navigation("Maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.ModuloCaptura", b =>
                {
                    b.HasOne("GeoDroid.Data.Maquina", "maquina")
                        .WithMany()
                        .HasForeignKey("idMaquinas");

                    b.Navigation("maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.MotivoMaquinaNoRecaudada", b =>
                {
                    b.HasOne("GeoDroid.Data.ConceptoMotivoMaquinaNoRecaudada", "ConceptoMotivoMaquinaNoRecaudada")
                        .WithMany()
                        .HasForeignKey("idConceptoMotivoMaquinaNoRecaudada");

                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia");

                    b.Navigation("ConceptoMotivoMaquinaNoRecaudada");

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("GeoDroid.Data.PatronContadorDetalle", b =>
                {
                    b.HasOne("GeoDroid.Data.PatronContador", "patronContador")
                        .WithMany("PatronesContadoresDetalle")
                        .HasForeignKey("idPatronContador");

                    b.Navigation("patronContador");
                });

            modelBuilder.Entity("GeoDroid.Data.Prestamo", b =>
                {
                    b.HasOne("GeoDroid.Data.ConceptoPrestamo", "ConceptoPrestamo")
                        .WithMany()
                        .HasForeignKey("idConceptoPrestamo");

                    b.HasOne("GeoDroid.Data.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresa");

                    b.HasOne("GeoDroid.Data.Establecimiento", "Establecimiento")
                        .WithMany()
                        .HasForeignKey("idEstablecimiento");

                    b.HasOne("GeoDroid.Data.Maquina", "Maquina")
                        .WithMany()
                        .HasForeignKey("idMaquina");

                    b.Navigation("ConceptoPrestamo");

                    b.Navigation("Empresa");

                    b.Navigation("Establecimiento");

                    b.Navigation("Maquina");
                });

            modelBuilder.Entity("GeoDroid.Data.PrestamoRecuperacion", b =>
                {
                    b.HasOne("GeoDroid.Data.Prestamo", "Prestamo")
                        .WithMany()
                        .HasForeignKey("idPrestamos");

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("GeoDroid.Data.Recaudacion", b =>
                {
                    b.HasOne("GeoDroid.Data.Incidencia", "Incidencia")
                        .WithMany()
                        .HasForeignKey("idIncidencia");

                    b.HasOne("GeoDroid.Data.Ruta", "Ruta")
                        .WithMany()
                        .HasForeignKey("idRuta");

                    b.Navigation("Incidencia");

                    b.Navigation("Ruta");
                });

            modelBuilder.Entity("GeoDroid.Data.Ruta", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "Establecimiento")
                        .WithMany()
                        .HasForeignKey("idEstablecimiento");

                    b.Navigation("Establecimiento");
                });

            modelBuilder.Entity("GeoDroid.Data.UltimaLecturaRecaudacion", b =>
                {
                    b.HasOne("GeoDroid.Data.Maquina", "Maquina")
                        .WithMany()
                        .HasForeignKey("idMaquina");

                    b.HasOne("GeoDroid.Data.PatContDetalle", "PatContDetalles")
                        .WithMany()
                        .HasForeignKey("idPatContDetalles");

                    b.Navigation("Maquina");

                    b.Navigation("PatContDetalles");
                });

            modelBuilder.Entity("GeoDroid.Data.VehiculoCombustible", b =>
                {
                    b.HasOne("GeoDroid.Data.TipoCombustible", "TipoCombustible")
                        .WithMany()
                        .HasForeignKey("idTipoCombustible");

                    b.HasOne("GeoDroid.Data.Vehiculo", "Vehiculos")
                        .WithMany()
                        .HasForeignKey("idVehiculos");

                    b.Navigation("TipoCombustible");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("GeoDroid.Data.VehiculoKm", b =>
                {
                    b.HasOne("GeoDroid.Data.Vehiculo", "Vehiculos")
                        .WithMany()
                        .HasForeignKey("idVehiculos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("GeoDroid.Data.VehiculoRepostaje", b =>
                {
                    b.HasOne("GeoDroid.Data.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("idEmpresas");

                    b.HasOne("GeoDroid.Data.TipoCombustible", "TipoCombustible")
                        .WithMany()
                        .HasForeignKey("idTipoCombustible");

                    b.HasOne("GeoDroid.Data.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("idVehiculos");

                    b.Navigation("Empresa");

                    b.Navigation("TipoCombustible");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("GeoDroid.Data.VisitaComercial", b =>
                {
                    b.HasOne("GeoDroid.Data.Establecimiento", "Establecimiento")
                        .WithMany()
                        .HasForeignKey("idEstablecimiento");

                    b.HasOne("GeoDroid.Data.MotivoVisitaComercial", "MotivoVisitaComercial")
                        .WithMany()
                        .HasForeignKey("idMotivoVisitaComercial");

                    b.Navigation("Establecimiento");

                    b.Navigation("MotivoVisitaComercial");
                });

            modelBuilder.Entity("Geodroid.Data.RecaudacionDetalles", b =>
                {
                    b.HasOne("GeoDroid.Data.Recaudacion", "Recaudacion")
                        .WithMany()
                        .HasForeignKey("idRecaudacion");

                    b.Navigation("Recaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.DTO.CacheImportes", b =>
                {
                    b.Navigation("cacheImportesConceptosRecaudacion");
                });

            modelBuilder.Entity("GeoDroid.Data.Establecimiento", b =>
                {
                    b.Navigation("AccionesComerciales");

                    b.Navigation("Maquinas");
                });

            modelBuilder.Entity("GeoDroid.Data.MotivoAccionComercial", b =>
                {
                    b.Navigation("AccionesComerciales");
                });

            modelBuilder.Entity("GeoDroid.Data.PatronContador", b =>
                {
                    b.Navigation("PatronesContadoresDetalle");
                });

            modelBuilder.Entity("GeoDroid.Data.TipoAccionComercial", b =>
                {
                    b.Navigation("AccionesComerciales");
                });
#pragma warning restore 612, 618
        }
    }
}
