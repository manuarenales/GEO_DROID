@using GEO_DROID.Services
@using GeoDroid.Data.Models
@inject LecturaContadorService _LecturaContadorService;
@inject LecturaContadorDetalleService _LecturaContadorDetalleService;
@inject PatronContadorService _PatronContadorService
@inject MaquinaService _MaquinaService ;
@inject PatronContadorDetalleService _PatronContadorDetalleService;

<form class="w-100 content overflow-auto  w-100 d-flex flex-column align-items-center justify-content-start " needs-validation>
    <div class="row w-100 bg-dark ">
        <div class="col-12 w-100 d-flex flex-column justify-content-center align-items-center  ">

            <span style="color:white" class="SubTitulo">
                Tipo Lectura  GEOLINE
            </span>
            @* <span style="color:white" class="SubTitulo"> </span>  *@
        </div>
        <div class="col-12 w-100 d-flex flex-column justify-content-center align-items-center  ">
        </div>
    </div>
    <div class="row w-100 ">
        @foreach (LecturaDetalle lecturaDetalle in LecturasDetalle)
        {
            <div class="col-12 w-100 border d-flex flex-column justify-content-start">
                <span>@lecturaDetalle.patContDetalle.tipoContadores  (@lecturaDetalle.patContDetalle.valorPaso)</span>
                <input type="number" class="mb-1" @bind="lecturaDetalle.valor" />
            </div>
        }
    </div>
</form>

<div class="w-100 bg-red" style="height:8vw;"></div>

<div class="row m-1 fixed-bottom  ">
    <div class="col-4 p-1">
        <button type="button" class="btn btn-secondary w-100" @onclick="GuardarLectura ">Guardar</button>
    </div>
    <div class="col-4 p-1">
        <button type="button" class="btn btn-secondary w-100" @onclick="LeerLectura ">Leer</button>
    </div>
    <div class="col-4 p-1">
        <button type="button" class="btn btn-secondary w-100" @onclick="CancelarLectura ">Cancelar </button>
    </div>
</div>


@code {
    [Parameter]
    public bool Modified { get; set; }
    [Parameter]
    public EventCallback<bool> ModifiedChanged { get; set; }
    [Parameter]
    public int idIncidencia { get; set; }
    [Parameter]
    public int idAveria { get; set; }
    [Parameter]
    public int idEstablecimiento { get; set; }
    [Parameter]
    public int idMaquinas { get; set; }
    [Parameter]
    public EventCallback<List<LecturaDetalle>> Changed { get; set; }
    [Parameter]
    public List<LecturaDetalle> ParameterLecturasDetalle { get; set; }

    public List<LecturaDetalle> LecturasDetalle;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (ParameterLecturasDetalle == null)
        {
            Maquina maquina = await _MaquinaService.GetMaquinaById(idMaquinas);
            //tenemos que crear N Lectura Detalle para esta LecturaContador
            PatronContador patronContador = await _PatronContadorService.GetPatronContadorById(maquina.idPatronContadores);
            List<PatronContadorDetalle> patronContadorDetalles = _PatronContadorDetalleService.GetPatronContadorDetaleFromPatronContadorId(patronContador.id).ToList();

            this.LecturasDetalle = new List<LecturaDetalle>();

            foreach (PatronContadorDetalle patronContadorDetalle in patronContadorDetalles)
            {
                LecturaDetalle Lecturadetalle = new LecturaDetalle();
                Lecturadetalle.idPatContDetalles = patronContadorDetalle.id;
                Lecturadetalle.patContDetalle = patronContadorDetalle;
                this.LecturasDetalle.Add(Lecturadetalle);
            }
        }
        else
        {
            LecturasDetalle = ParameterLecturasDetalle;
           
        }
    }

    public async void GuardarLectura()
    {
        await ModifiedChanged.InvokeAsync(true);
        await Changed.InvokeAsync(LecturasDetalle);
    }

    public async void CancelarLectura()
    {
        if (idAveria > 0)
        {
            if (LecturasDetalle[0] != null && LecturasDetalle[0].id > 0)
            {
                _LecturaContadorDetalleService.Reload(LecturasDetalle);
            }
            else
            {
                foreach (LecturaDetalle lec in LecturasDetalle)
                {
                    lec.valor = 0;
                }
                await ModifiedChanged.InvokeAsync(false);
            }

            await Changed.InvokeAsync(LecturasDetalle);
        }
        else
        {
            foreach (LecturaDetalle lec in LecturasDetalle)
            {
                lec.valor = 0;
            }
            await ModifiedChanged.InvokeAsync(false);
            await Changed.InvokeAsync(LecturasDetalle);
        }

    }

    public async void LeerLectura()
    {

    }

}