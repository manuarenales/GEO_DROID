@page "/rutas"

@using GEO_DROID.Models
@using GEO_DROID.Services

@inject NavigationManager Navigation
@inject EstablecimientosService Builder
@inject CultureService Cultureservice
@inject IStringLocalizer<StringLocalizer> Localizer;
@inject EstablecimientosService EstablecimientoService

<ul class="list-group">
    <li class="additem list-group-item d-flex justify-content-start align-items-lg-center" @onclick="() => OpenModal()">
        <img class="m-1" src="img/add.png" />
        <span class="m-2 title font-weight-bold"> @Localizer["añadirestablecimiento"]</span>
    </li>
    <li class="list-group-item d-flex justify-content-between align-items-lg-center" style="position: relative;">
        <span class="m-2 title font-weight-bold">@FormattedDate(selectedDate)</span>
        <img class="m-1" src="img/calendar.png" />
        <input type="date" @ref="dateInput" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; z-index: 1;" @bind="selectedDate" />
    </li>
</ul>

<ul class="list-group list-group-flush">
    @foreach (Establecimiento establecimiento in MenuItems)
    {
        <li class="list-group-item d-flex flex-row justify-content-between align-items-lg-center">
            <div class="w-100" @onclick='() => NavigateTo("opciones/"+ establecimiento.id)'>
                <span class="m-2 title2  "> @establecimiento.nombre</span>
                <div class="d-flex justify-content-start align-items-lg-center">
                    <img class="m-1" src="img/maquinaJuego.jpg" />
                    <img class="m-1" src="img/repare.jpg" />
                    <img class="m-1" src="img/flechas.jpg" />
                    <img class="m-1" src="img/recaudo.jpg" />
                </div>
            </div>
            <div class="mt-2 mb-1 pt-2 pb-2">
                <GEO_DROID.Shared.Components.Otros.Recaudacion CodigoEstablecimiento="@establecimiento.codigo"></GEO_DROID.Shared.Components.Otros.Recaudacion>
            </div>
        </li>
    }
</ul>

<div class="modal" tabindex="-1" role="dialog" style="display: @(modalVisible ? "block" : "none")">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Localizer["añadirestablecimiento"]</h4>
                <button type="button" class="close" aria-label="Close" @onclick="HideModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="text" @bind="busqueda" placeholder="Buscar" class="w-100 p-2" />
                <div class="m-2">
                    <ul class="list-group">
                        @foreach (Establecimiento item in establecimientosList.Where(m => m.nombre.Contains(busqueda)))
                        {
                            <li class="list-group-item" @onclick='() => AddItemToList(item)'><span>@item.nombre</span></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public List<Establecimiento> MenuItems = new List<Establecimiento>();
    private ElementReference dateInput;
    private DateTime selectedDate = DateTime.Now;
    private string name;
    bool modalVisible = false;
    string busqueda = "";
    private List<Establecimiento> establecimientosList = new List<Establecimiento>();
    private EstablecimientosService establecimientoService;



    protected override async Task OnInitializedAsync()
    {
        establecimientoService = new EstablecimientosService();
        Cultureservice.CultureChanged += StateHasChanged;
        MenuItems = await EstablecimientoService.GetEstablecimientos();
        establecimientosList = await EstablecimientoService.GetEstablecimientos();
    }

    async void OnNameChanged(string value)
    {
        name = value;
        MenuItems = await Builder.GetEstablecimientos();
    }
    private void NavigateTo(string pageTitle)
    {
        Navigation.NavigateTo($"/{pageTitle.ToLower()}", false, false);
    }
    private async void DeleteItem(Establecimiento establecimiento)
    {
        await EstablecimientoService.DeleteEstablecimientoAsync(establecimiento);
        MenuItems.Remove(establecimiento);
        StateHasChanged();
    }
    public string FormattedDate(DateTime date)
    {
        return $"{date.ToString("dddd, dd")} de {date.ToString("MMMM")}, {date.Year}";
    }



    void OpenModal()
    {
        modalVisible = true;
    }

    void HideModal()
    {
        modalVisible = false;
    }


    private void AddItemToList(Establecimiento item)
    {
        MenuItems.Add(item);
        StateHasChanged();
    }

}