using GeoDroid.Data;
using InTheHand.Net;
using System.Text;

namespace GEO_DROID.Services
{
    public class TicketsService
    {
        private BluetoothServiceManager _BluetoothServiceManager;
        private EstablecimientosService _EstablecimientosService;
        private AveriasService _AveriasService;
        private CargaService _CargaService;
        public TicketsService()
        {
            _BluetoothServiceManager = new BluetoothServiceManager();
            _EstablecimientosService = new EstablecimientosService();
            _AveriasService = new AveriasService();
            _CargaService = new CargaService();
        }

        public List<string> getTiketsList(int id)
        {
            List<string> list = new List<string>();
            list.Add("Averias");
            list.Add("Rec. Totales");
            list.Add("Recaudacion con desglose");
            list.Add("Rec. Reducido");
            list.Add("Rec. Detallado");
            list.Add("Rec. Detallado Contadores");
            list.Add("Rec. Superdetallado");
            return list;
        }

        public async void PrintAveriasFromEstablecimiento(int idEstablecimientos, BluetoothAddress address)
        {
            Establecimiento establecimiento = await _EstablecimientosService.GetEstablecimientoById(idEstablecimientos);
            List<Averia> averias = _AveriasService.GetAveriasByEstablecimiento(idEstablecimientos).ToList();

            StringBuilder dataToDisplay = new StringBuilder();

            // Añadir información del establecimiento
            dataToDisplay.AppendLine(PadRight(establecimiento.nombre + " / " + establecimiento.codigo, 32));
            dataToDisplay.AppendLine(PadRight("--------------Averias-------------", 32));

            // Añadir información de averías

            foreach (Averia averia in averias)
            {
                Carga carga = await _CargaService.GetCargaByAveriaId(averia.id);
                dataToDisplay.AppendLine(PadRight("Maquina: " + averia.incidencia.maquina.descripcionDistribucion, 32));
                dataToDisplay.AppendLine(PadRight("Estado: " + averia.averiaEstado.descripcion, 32));
                if (carga != null)
                {
                    dataToDisplay.AppendLine(PadRight("Carga: cargaEmpresa -> " + carga.cargaEmpresa, 32));
                    dataToDisplay.AppendLine(PadRight("ajusteEmpresa -> " + carga.ajusteEmpresa, 32));
                }
            }

            byte[] byteArray = Encoding.UTF8.GetBytes(dataToDisplay.ToString());
            await _BluetoothServiceManager.SendData(byteArray, address);
        }


        private string PadRight(string input, int length)
        {
            if (input.Length >= length)
            {
                return input.Substring(0, length);
            }
            return input.PadRight(length);
        }



    }
}
