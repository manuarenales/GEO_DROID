using GeoDroid.Data;
using SQLite;
using System.Collections;
using System.Reflection;
using System.Text;

namespace GEO_DROID.Services.SincroService
{
    public class SerializationCommands
    {
        private static IList GetLista(Type tipo)
        {
            // 1) Creamos List<tipo> en tiempo de ejecución
            Type listDataType = typeof(List<>).MakeGenericType(tipo);
            IList lista = (IList)Activator.CreateInstance(listDataType);

            // 2) Abrimos la conexión SQLite
            using var db = new SQLiteConnection(Constants.DatabasePath);

            // 3) Invocamos db.Table<tipo>() vía reflexión
            MethodInfo miTable = db.GetType()
                                   .GetMethod(nameof(SQLiteConnection.Table), BindingFlags.Public | BindingFlags.Instance)
                                   ?.MakeGenericMethod(tipo);
            if (miTable == null)
                throw new InvalidOperationException("No se pudo resolver método Table<T>() en la conexión SQLite.");

            object tableQuery = miTable.Invoke(db, null);
            if (tableQuery == null)
                return lista;  // sin datos

            // 4) Invocamos ToList() en el resultado de Table<T>
            MethodInfo miToList = tableQuery.GetType()
                .GetMethod(
                    "ToList",
                    BindingFlags.Public | BindingFlags.Instance,
                    binder: null,
                    types: Type.EmptyTypes,
                    modifiers: null
                );
            if (miToList == null)
                throw new InvalidOperationException("No se encontró ToList() en TableQuery<T>.");

            var resultEnum = miToList.Invoke(tableQuery, null) as IEnumerable;
            if (resultEnum == null)
                return lista;

            // 5) Copiamos cada elemento en nuestro IList tipado
            foreach (var item in resultEnum)
                lista.Add(item);

            return lista;
        }


        public static MemoryStream GetDatos(Type tipo)
        {
            MemoryStream ms = new MemoryStream();
            IList obj = GetLista(tipo);
            DataContractSerialization.WriteObject(ms, obj);
            return ms;
        }

        private static Type GetTypeFromTable(string tableName)
        {
            string ns = typeof(Maquina).Namespace;
            Assembly assembly = typeof(Maquina).Assembly;
            Type type = assembly.GetType(ns + "." + tableName);
            return type;
        }

        public static string SerializeTable(string tableName)
        {
            string data = "";
            try
            {
                Type type = GetTypeFromTable(tableName);
                MemoryStream ms = GetDatos(type);
                data = Encoding.UTF8.GetString(ms.ToArray());
            }
            catch
            {

            }
            return data;
        }
    }
}
