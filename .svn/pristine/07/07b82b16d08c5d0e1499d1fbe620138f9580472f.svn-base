@page "/utilities"
@using BlazorBarcodeScanner.ZXing.JS
 @using GEO_DROID.Resources
@using InTheHand.Net.Bluetooth
@using InTheHand.Net.Sockets
@using System.Net.Sockets
@using System.Text
 

@using Microsoft.Maui.Controls.PlatformConfiguration
@using System.Collections.ObjectModel



<span style="display: @(loading ? "block" : "none"); position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;" class="text-center">
    <span class="spinner-border text-warning"></span>
    <span>Loading...</span>
</span>




@if (devicesBL.Count > 0)
{
    <ul class="list-group list-group ">
        @foreach (var devicebl in devicesBL)
        {
            <li class="list-group-item d-flex flex-row justify-content-between align-items-center">
                <div class=" d-flex flex-column justify-content-center align-items-center">
                    <span>@devicebl.DeviceAddress </span>
                    <span>@devicebl.DeviceName</span>
                    <button @onclick="() => ConectBl(devicebl)">
                        <span class="@((devicebl.Connected) ? "connected" : "disconnected")"> @((devicebl.Connected) ? "Conectado" : "Conectar") </span>
                    </button>
                </div>
            </li>
        }
    </ul>
}


<div>
</div>

<div style="height: 65px;"></div>
<div Class="row m-2  fixed-bottom mb-3 ">
    <div Class="col-1">
    </div>
    <div Class="col-10 p-1">
        <button Class="w-100" Color="Color.Primary" @onclick="ONOFFBlue">Buscar por Bluetooth</button>
    </div>
    @*<Div Class="col-4 p-1">
    <Button Class="w-100" Color="Color.Primary" @onclick="ShowSincroModal">Añadir Manualmente</Button>
    @if (Connected)
    {
    <button @onclick="SendData">Mandar Por Bluetooth</button>
    }
    </Div> *@
    <div Class="col-1">
    </div>
</div>

@*<BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title="Scan Barcode from Camera" StartCameraAutomatically="false" ShowStart="true" ShowReset="true" ShowVideoDeviceList="true" VideoWidth="300" VideoHeight="200" OnBarcodeReceived="LocalReceivedBarcodeText" OnErrorReceived="Wat" />*@
@*
<Modal @ref="modalNewDevice">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Datos de Dispositivo  </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <form>
                <div class="form-group">
                    <label for="exampleInputEmail1">Device address</label>
                    <input type="text" @bind="newDeviceAddress" class="form-control" id="exampleInputEmail1">
                </div>
                <button @onclick="ConnectToDevice" type="submit" class="btn btn-primary">Conectar</button>
            </form>
        </ModalBody>
    </ModalContent>
</Modal> *@


@code {
    IReadOnlyCollection<BluetoothDeviceInfo> devicesBL;
    // private DeviceCandidate newDevice = new DeviceCandidate();
    private BluetoothClient client;
    private bool Connected = false;
    private string newDeviceAddress;
    private BluetoothDeviceInfo deviceConected;
    private BluetoothDeviceInfo deviceFormModal;
    private string LocalBarcodeText;

    bool enabled;
    bool loading = false;


    protected override async Task OnInitializedAsync()
    {
        devicesBL = new List<BluetoothDeviceInfo>();
        await Permissions.RequestAsync<BluetoothPermissions>();
        await Permissions.RequestAsync<Permissions.Camera>();
        client = new BluetoothClient();
        //devicesBL = await BluetoothDevicesDataBase.GetItemsAsync();

    }

    // public async Task<List<DeviceCandidate>> LoadDevices()
    // {
    //     return await todoItemDatabase.GetItemsAsync();
    // }



    public async Task ONOFFBlue()
    {
        loading = true;
        await Task.Run(() =>
        {
            devicesBL = client.DiscoverDevices();
        });
        loading = false;
        StateHasChanged();
    }

    public async void ConectBl(BluetoothDeviceInfo device)
    {
        try
        {
            await Task.Run(() =>
       {
           if (device != null && device.DeviceAddress != null)
           {
               client.Connect(device.DeviceAddress, BluetoothService.SerialPort);
               if (client.Connected)
               {
                   Connected = true;
                   deviceConected = device;
                   Console.WriteLine("Conectado con éxito al dispositivo Bluetooth.");
                   // guardamos el dispositivo en la base de datos ;
                   StateHasChanged();
               }
               else
               {
                   Console.WriteLine("No se pudo conectar al dispositivo Bluetooth.");
               }
           }
           else
           {
               Console.WriteLine("El dispositivo o la dirección del dispositivo no pueden ser nulos.");
           }
       });

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar el dispositivo Bluetooth: {ex.Message}");
        }
    }

    public async void SendData()
    {
        try
        {
            if (client.Connected)
            {
                NetworkStream stream = client.GetStream();
                if (stream.CanWrite)
                {
                    byte[] byteArray = Encoding.UTF8.GetBytes("lest go , Im alive !!");
                    await stream.WriteAsync(byteArray, 0, byteArray.Length);
                    Console.WriteLine("Datos enviados al dispositivo Bluetooth.");
                }
                else
                {
                    Console.WriteLine("No se puede escribir en el stream del dispositivo Bluetooth.");
                }
            }
            else
            {
                Console.WriteLine("El cliente Bluetooth no está conectado.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al enviar datos al dispositivo Bluetooth: {ex.Message}");
        }
    }

    private void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {

        this.LocalBarcodeText = args.BarcodeText;
        StateHasChanged();
    }

    public void Wat(object error)
    {
        var sis = error;
    }


}
