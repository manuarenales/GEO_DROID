using GEO_DROID.Resources;
using GEO_DROID.Resources.PrinterResources;
using GEO_DROID.Store.Maquinas;
using GeoDroid.Data;
using GeoDroid.Data.SQL;
using InTheHand.Net;
using System.Text;

namespace GEO_DROID.Services
{
    public class TicketsService
    {
        private BluetoothServiceManager _BluetoothServiceManager;
        private readonly GeoDroidDatabase _database;

        public TicketsService(GeoDroidDatabase database)
        {
            PermissionStatus permissionStatus = Permissions.CheckStatusAsync<BluetoothPermissions>().Result;
            if (permissionStatus == PermissionStatus.Denied)
            {
                Permissions.RequestAsync<BluetoothPermissions>();
                Permissions.RequestAsync<Permissions.Camera>();
            }
            else { _BluetoothServiceManager = new BluetoothServiceManager(); }

            _database = database;
        }

        public List<string> getTiketsList(int id)
        {
            List<string> list = new List<string>();
            list.Add("Averias");
            list.Add("Rec. Totales");
            list.Add("Recaudacion con desglose");
            list.Add("Rec. Reducido");
            list.Add("Rec. Detallado");
            list.Add("Rec. Detallado Contadores");
            list.Add("Rec. Superdetallado");
            return list;
        }

        public async void PrintAveriasFromEstablecimiento(int idEstablecimientos, BluetoothAddress address)
        {
            try
            {
                Establecimiento establecimiento = await _database._database.Table<Establecimiento>().Where(e => e.id == idEstablecimientos).FirstOrDefaultAsync();
                List<Maquina> maquinasDeEstablecimiento = await _database._database.Table<Maquina>().Where(m => m.idEstablecimiento == establecimiento.id).ToListAsync();

                List<Incidencia> Incidencias = new List<Incidencia>();
                foreach (Maquina m in maquinasDeEstablecimiento)
                {
                    List<Incidencia> inc = await _database._database.Table<Incidencia>().Where(i => i.idMaquinas == m.id).ToListAsync();

                    Incidencias.AddRange(inc);
                }

                List<Averia> averias = new List<Averia>();
                foreach (Incidencia i in Incidencias)
                {
                    averias.AddRange(await _database._database.Table<Averia>().Where(a => a.idIncidencias == i.id).ToListAsync());
                }

                StringBuilder dataToDisplay = new StringBuilder();
                // Añadir información del establecimiento
                dataToDisplay.AppendLine(PadRight(establecimiento.nombre + " / " + establecimiento.codigo, 32));
                dataToDisplay.AppendLine(PadRight("----------- Averias -----------", 32));

                // Añadir información de averías  
                foreach (Averia averia in averias)
                {
                    // Cargar relaciones manualmente
                    if (averia.Incidencia == null)
                        averia.Incidencia = await _database._database.Table<Incidencia>().Where(i => i.id == averia.idIncidencias).FirstOrDefaultAsync();

                    if (averia.Incidencia?.maquina == null)
                        averia.Incidencia.maquina = await _database._database.Table<Maquina>().Where(m => m.id == averia.Incidencia.idMaquinas).FirstOrDefaultAsync();

                    if (averia.AveriaEstado == null)
                        averia.AveriaEstado = await _database._database.Table<AveriaEstado>().Where(e => e.id == averia.idAveriaEstados).FirstOrDefaultAsync(); // Ajusta `idEstado`

                    Carga carga = await GetCargaByAveriaId(averia.id);

                    dataToDisplay.AppendLine(PadRight("Maquina: " + (averia.Incidencia?.maquina?.descripcionDistribucion ?? "N/D"), 32));
                    dataToDisplay.AppendLine(PadRight("Estado: " + (averia.AveriaEstado?.descripcion ?? "N/D"), 32));

                    if (carga != null)
                    {
                        dataToDisplay.AppendLine(PadRight("Carga: cargaEmpresa -> " + carga.cargaEmpresa, 32));
                        dataToDisplay.AppendLine(PadRight("ajusteEmpresa -> " + carga.ajusteEmpresa, 32));
                    }
                }


                dataToDisplay.AppendLine($"{(char)27}{(char)30}");
                dataToDisplay.AppendLine($"{(char)27}@");

                byte[] byteArray = Encoding.UTF8.GetBytes(dataToDisplay.ToString());

                await _BluetoothServiceManager.SendData(byteArray, address);
            }
            catch (Exception ex)
            {
                return;
            }

        }

        public async void PrintAveriasFromEstablecimiento2(int idEstablecimientos, BluetoothAddress address)
        {
            Establecimiento establecimiento = await _database._database.Table<Establecimiento>().Where(e => e.id == idEstablecimientos).FirstOrDefaultAsync();
            List<Maquina> maquinasDeEstablecimiento = await _database._database.Table<Maquina>().Where(m => m.idEstablecimiento == establecimiento.id).ToListAsync();

            List<Incidencia> Incidencias = new List<Incidencia>();
            foreach (Maquina m in maquinasDeEstablecimiento)
            {
                Incidencias.AddRange(await _database._database.Table<Incidencia>().Where(i => i.idMaquinas == m.id).ToListAsync());
            }

            List<Averia> averias = new List<Averia>();
            foreach (Incidencia i in Incidencias)
            {
                averias.AddRange(await _database._database.Table<Averia>().Where(a => a.idIncidencias == i.id).ToListAsync());
            }


            List<TicketLine> Ticket = new List<TicketLine>();

            var nombreCodigoLines = WrapText("Establecimiento : " + establecimiento.nombre + " / " + establecimiento.codigo, 32);

            foreach (var line in nombreCodigoLines)
            {
                Ticket.Add(new TicketLine(line).Bold().Underline().Align("center"));
            }

            Ticket.Add(new TicketLine("----------- Averias -----------").Bold().Align("center"));

            foreach (Averia averia in averias)
            {
                Carga carga = await GetCargaByAveriaId(averia.id);

                var maquinaLines = WrapText("Maquina: " + averia.Incidencia.maquina.descripcionDistribucion, 32);
                foreach (var line in maquinaLines)
                {
                    Ticket.Add(new TicketLine(line).Bold().Align("left"));
                }

                var estadoLines = WrapText("Estado: " + averia.AveriaEstado.descripcion, 32);
                foreach (var line in estadoLines)
                {
                    Ticket.Add(new TicketLine(line).Bold().Align("left"));
                }

                foreach (var line in estadoLines)
                {
                    TicketsService.WrapText(line.TrimEnd(), 34);
                }

                if (carga != null)
                {
                    var cargaEmpresaLines = WrapText("Carga: cargaEmpresa -> " + carga.cargaEmpresa, 32);
                    foreach (var line in cargaEmpresaLines)
                    {
                        Ticket.Add(new TicketLine(line).Bold().Align("left"));
                    }

                    var ajusteEmpresaLines = WrapText("AjusteEmpresa -> " + carga.ajusteEmpresa, 32);
                    foreach (var line in ajusteEmpresaLines)
                    {
                        Ticket.Add(new TicketLine(line).Bold().Align("left"));
                    }
                }
                Ticket.Add(new TicketLine($"--------------------").Align("center"));
            }
            Ticket.Add(new TicketLine("").Align("center"));
            Ticket.Add(new TicketLine("").Align("center"));
            Ticket.Add(new TicketLine("").Align("center"));
            _BluetoothServiceManager.SendData2(Ticket, address);

        }


        public static List<string> WrapText(string text, int maxLineLength)
        {
            var words = text.Split(' ');
            var wrappedLines = new List<string>();
            var currentLine = new StringBuilder();

            foreach (var word in words)
            {
                if (currentLine.Length + word.Length + 1 <= maxLineLength)
                {
                    if (currentLine.Length > 0)
                    {
                        currentLine.Append(" ");
                    }
                    currentLine.Append(word);
                }
                else
                {
                    wrappedLines.Add(currentLine.ToString());
                    currentLine.Clear();
                    currentLine.Append(word);
                }
            }
            if (currentLine.Length > 0)
            {
                wrappedLines.Add(currentLine.ToString());
            }

            return wrappedLines;
        }


        private string PadRight(string input, int length)
        {
            if (input.Length >= length)
            {
                return input.Substring(0, length);
            }
            return input.PadRight(length);
        }


        public async Task<Carga> GetCargaByAveriaId(int idAveria)
        {
            // Obtener la carga asociada a esa avería
            var carga = await _database._database.Table<Carga>().Where(c => c.idAverias == idAveria).FirstOrDefaultAsync();
            if (carga == null)
                return null;

            // Obtener la avería asociada
            carga.Averia = await _database._database.Table<Averia>().Where(a => a.id == idAveria).FirstOrDefaultAsync();

            if (carga.Averia != null)
            {
                // Obtener la incidencia relacionada
                carga.Averia.Incidencia = await _database._database.Table<Incidencia>().Where(i => i.id == carga.Averia.idIncidencias).FirstOrDefaultAsync();

                if (carga.Averia.Incidencia != null)
                {
                    // Obtener la máquina relacionada
                    carga.Averia.Incidencia.maquina = await _database._database.Table<Maquina>().Where(m => m.id == carga.Averia.Incidencia.idMaquinas).FirstOrDefaultAsync();

                    if (carga.Averia.Incidencia.maquina != null)
                    {
                        // Obtener el establecimiento de la máquina
                        carga.Averia.Incidencia.maquina.establecimiento = await _database._database.Table<Establecimiento>()
                            .Where(e => e.id == carga.Averia.Incidencia.maquina.idEstablecimiento).FirstOrDefaultAsync();
                    }
                }
            }

            return carga;
        }

    }
}
