@page "/configuracion"
@using GEO_DROID.Services
@using System.Text.Json
@inject NavigationManager Navigation
@inject IStringLocalizer<StringLocalizer> Localizer;
@inject CultureService Cultureservice
@inject IJSRuntime JS

<NavigationLock OnBeforeInternalNavigation=OnLocationChanging />


<div class="row">
    <div class="col-12">
        <h5>Sincronizacion</h5>
        <div class="list-group">
            <div class="list-group-item d-flex flex-column justify-content-start">
                <span>Nº Unidad</span>
                <input class="form-control @(NunidadIsValid ? "" : "is-invalid")" type="number" placeholder="Some text value..." @bind="configuration.Nterminal" />
                @if (!NunidadIsValid)
                {
                    <div class="invalid-feedback">
                        Please enter a valid unit number.
                    </div>
                }
            </div>
            <div class="list-group-item d-flex flex-column justify-content-start">
                <span>Contraseña</span>
                <input class="form-control @(ContraseñaIsValid ? "" : "is-invalid")" placeholder="Some text value..." @bind="configuration.Contaseña" />
                @if (!ContraseñaIsValid)
                {
                    <div class="invalid-feedback">
                        Please enter a valid password.
                    </div>
                }
            </div>
            <div class="list-group-item d-flex flex-column justify-content-start">
                <span>Servidor GEO</span>
                <input class="form-control @(ServerIsValid ? "" : "is-invalid")" placeholder="Some text value..." @bind="configuration.ServidorGeo" />
                @if (!ServerIsValid)
                {
                    <div class="invalid-feedback">
                        Please enter a valid GEO server.
                    </div>
                }
            </div>
            <div class="list-group-item d-flex flex-column justify-content-start">
                <span>Puerto GEO</span>
                <input class="form-control @(PuertoIsValid ? "" : "is-invalid")" type="number" placeholder="Some text value..." @bind="configuration.Puerto" />
                @if (!PuertoIsValid)
                {
                    <div class="invalid-feedback">
                        Please enter a valid GEO port.
                    </div>
                }
            </div>
            <div class="list-group-item d-flex justify-content-start align-items-center">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="configuration.MinUsoDeDatos" id="minDatos">
                    <label class="form-check-label" for="minDatos">Minimizar uso de datos</label>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 mt-2">
        <h5>Tickets</h5>
        <div class="list-group">
            <div class="list-group-item d-flex flex-column justify-content-start" @onclick='() => NavigateTo("utilities")'>
                <span>Impresora</span>
                <span>00:01:09:D8:E9:11</span>
            </div>
            <div class="list-group-item d-flex justify-content-start align-items-center">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="firmas" id="firmas">
                    <label class="form-check-label" for="firmas">Imprimir area de firmas</label>
                </div>
            </div>
            <div class="list-group-item d-flex justify-content-start align-items-center">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="tiketCopi" id="tiketCopi">
                    <label class="form-check-label" for="tiketCopi">Imprimir dos copias del tiket</label>
                </div>
            </div>
        </div>
        <div class=" col-12 p-2 w-100 ">
            <button type="button" class="btn btn-secondary w-100 p-2" @onclick="Salir">Salir</button>
        </div>
    </div>
</div>


@code {
    private bool minDatos { get; set; }
    private bool firmas { get; set; }
    private bool tiketCopi { get; set; }

    private bool NunidadIsValid { get; set; } = true;
    private bool ContraseñaIsValid { get; set; } = true;
    private bool ServerIsValid { get; set; } = true;
    private bool PuertoIsValid { get; set; } = true;
    private bool salir = false;

    private GeoDroid.Data.Models.Configuracion configuration { get; set; } = new GeoDroid.Data.Models.Configuracion();


    protected override async Task OnInitializedAsync()
    {
        var averiaJson = await JS.InvokeAsync<string>("localStorage.getItem", "configuration");
        salir = false;
        if (averiaJson != null)
        {
            configuration = JsonSerializer.Deserialize<GeoDroid.Data.Models.Configuracion>(averiaJson);
        }
        else
        {
            configuration = new GeoDroid.Data.Models.Configuracion();
        }
    }

    private async void Save()
    {
        var serializedObj = JsonSerializer.Serialize(configuration);
        await JS.InvokeVoidAsync("localStorage.setItem", "configuration", serializedObj);
    }

    private void NavigateTo(string pageTitle)
    {
        Navigation.NavigateTo($"/{pageTitle.ToLower()}");
    }

    private bool ValidForm()
    {
        NunidadIsValid = configuration.Nterminal != null;
        ContraseñaIsValid = !string.IsNullOrWhiteSpace(configuration.Contaseña);
        ServerIsValid = !string.IsNullOrWhiteSpace(configuration.ServidorGeo);
        PuertoIsValid = configuration.Puerto > 0 && configuration.Puerto <= 65535;

        return NunidadIsValid && ContraseñaIsValid && ServerIsValid && PuertoIsValid;
    }

    private void OnLocationChanging(LocationChangingContext context)
    {
        if (ValidForm())
        {
            Save();
        }
        else
        {
            if (salir)
            {

            }
            else
            {
                context.PreventNavigation();
            }
            StateHasChanged();
        }
    }

    private async void Salir()
    {
        salir = true;
        await JS.InvokeVoidAsync("history.back");
    }
}
