@using GEO_DROID.Models
@using GEO_DROID.Services
@inject ConceptoAveriaService conceptoAveriaService
@inject IStringLocalizer<StringLocalizer> Localizer


<div Class=" d-flex flex-column justify-content-start" @onclick="() => ShowModal()">
    <label class="form-label">
        Concepto
    </label>
    @if (conceptoAveria != null)
    {
        <input class="form-control @(IsValid ? "" : "is-invalid")" Style="color: blue" @bind="@conceptoAveria.descripcion" readonly ontouchstart="" />
    }
    else
    {
        <input class="form-control @(IsValid ? "" : "is-invalid")" readonly ontouchstart="" />
    }
    @if (!IsValid)
    {
        <div class="invalid-feedback">
            Please choose a valid Concept.
        </div>
    }
</div>


<div class="modal" tabindex="-1" role="dialog" style="display: @(modalVisible ? "block" : "none")">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["añadirestablecimiento"]</h5>
                <button type="button" class="close" aria-label="Close" @onclick="HideModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="text" @bind="Bconcepto" placeholder="Buscar" class="w-100 p-2" @oninput="FilterEstados" />
                <div class="m-2" style="height: 80%;  overflow-y: auto;">
                    <ul class="list-group">
                        @foreach (ConceptoAveria item in conceptos.Where(e => string.IsNullOrEmpty(Bconcepto) || e.descripcion.ToLower().Contains(Bconcepto.ToLower())))
                        {
                            <li class="list-group-item" @onclick="() => SetConceptoAveria(item)"><span>@item.descripcion</span></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public ConceptoAveria conceptoAveria { get; set; }
    [Parameter]
    public EventCallback<ConceptoAveria> conceptoAveriaChanged { get; set; }
    [Parameter]
    public EventCallback<ConceptoAveria> Changed { get; set; }
    [Parameter]
    public int idEstablecimiento { get; set; }
    [Parameter]
    public bool IsValid { get; set; } = true;

    private string Bconcepto = "";
    private bool IsIdConceptoValid { get; set; } = true;
    public List<ConceptoAveria> conceptos = new List<ConceptoAveria>();
    bool modalVisible = false;


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        conceptos = await conceptoAveriaService.Getconceptos();
    }

    void ShowModal()
    {
        modalVisible = true;
    }

    void HideModal()
    {
        modalVisible = false;
    }

    private void SetConceptoAveria(ConceptoAveria concepto)
    {
        conceptoAveriaChanged.InvokeAsync(concepto);
        Changed.InvokeAsync(concepto);
        HideModal();
    }

    public void FilterEstados(ChangeEventArgs filter)
    {
        Bconcepto = filter.Value.ToString();
    }

}
