using GeoDroid.Data;
using GeoDroid.Data.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GEO_DROID.Services
{
    public class LecturaContadorDetalleService
    {
        private readonly GeoDroidDbContext _dbContext;
        public LecturaContadorDetalleService()
        {
            _dbContext = new GeoDroidDbContext();
        }

        public void Reload(List<LecturaDetalle> LecturasDetalles)
        {
            foreach (LecturaDetalle LecturaDetalle in LecturasDetalles)
            {
                _dbContext.Entry(LecturaDetalle).Reload();
            }
        }

        public async Task<int> SaveLecturasContadorDetalle(LecturaDetalle item)
        {
            try
            {
                var existing = await _dbContext.LecturasDetalle.FirstOrDefaultAsync(m => m.id == item.id);
                if (existing != null)
                {
                    var entry = _dbContext.Entry(item);
                    entry.State = EntityState.Modified;
                    _dbContext.LecturasDetalle.Update(item);
                }
                else
                {
                    item.patContDetalle = null;
                    _dbContext.LecturasDetalle.Add(item);
                }
                return await _dbContext.SaveChangesAsync();
            }
            catch (Exception ex)
            {

                throw;
            }

        }


        public async Task<List<LecturaDetalle>> GetLecturaDetalleByLecturaContadorAsync(int idLecturaContador)
        {

            List<LecturaDetalle> ses = await _dbContext.LecturasDetalle.ToListAsync();
            return await _dbContext.LecturasDetalle.Where(ld => ld.idLecturaContadores == idLecturaContador).Include(ld => ld.patContDetalle).ToListAsync();
        }

        public async Task<List<LecturaDetalle>> GetLecturaDetalleAsync()
        {
            return await _dbContext.LecturasDetalle.ToListAsync();
        }
    }
}
